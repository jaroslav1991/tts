// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package dispatcher is a generated GoMock package.
package dispatcher

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/jaroslav1991/tts/internal/model"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSender) Send(data []model.PluginInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSenderMockRecorder) Send(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSender)(nil).Send), data)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// ClearSentData mocks base method.
func (m *MockStorage) ClearSentData(file string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearSentData", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearSentData indicates an expected call of ClearSentData.
func (mr *MockStorageMockRecorder) ClearSentData(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSentData", reflect.TypeOf((*MockStorage)(nil).ClearSentData), file)
}

// FixDataToSend mocks base method.
func (m *MockStorage) FixDataToSend() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FixDataToSend")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FixDataToSend indicates an expected call of FixDataToSend.
func (mr *MockStorageMockRecorder) FixDataToSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FixDataToSend", reflect.TypeOf((*MockStorage)(nil).FixDataToSend))
}

// GetFilesToSend mocks base method.
func (m *MockStorage) GetFilesToSend() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesToSend")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesToSend indicates an expected call of GetFilesToSend.
func (mr *MockStorageMockRecorder) GetFilesToSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesToSend", reflect.TypeOf((*MockStorage)(nil).GetFilesToSend))
}

// ReadDataToSend mocks base method.
func (m *MockStorage) ReadDataToSend(file string) ([]model.PluginInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDataToSend", file)
	ret0, _ := ret[0].([]model.PluginInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDataToSend indicates an expected call of ReadDataToSend.
func (mr *MockStorageMockRecorder) ReadDataToSend(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDataToSend", reflect.TypeOf((*MockStorage)(nil).ReadDataToSend), file)
}
